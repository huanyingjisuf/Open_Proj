/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 */

/** @file
 *
 * @defgroup ble_sdk_srv_common Common service definitions  //常见服务的定义。(通用服务定义)
 * @{
 * @ingroup ble_sdk_srv
 * @brief Constants, type definitions, and functions that are common to all services. (常量、类型定义和所有服务都通用的函数。)
 */

#ifndef BLE_SRV_COMMON_H__
#define BLE_SRV_COMMON_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble_types.h"
#include "app_util.h"
#include "ble.h"
#include "ble_gap.h"
#include "ble_gatt.h"

/** @defgroup UUID_SERVICES Service UUID definitions  //服务UUID定义 (常见服务UUID)
 * @{ */
#define BLE_UUID_ALERT_NOTIFICATION_SERVICE                      0x1811     /**< Alert Notification service UUID. 警报通知服务UUID*/
#define BLE_UUID_BATTERY_SERVICE                                 0x180F     /**< Battery service UUID. 电池服务UUID*/
#define BLE_UUID_BLOOD_PRESSURE_SERVICE                          0x1810     /**< Blood Pressure service UUID. 血压服务UUID*/
#define BLE_UUID_CURRENT_TIME_SERVICE                            0x1805     /**< Current Time service UUID. 当前时间服务UUID */
#define BLE_UUID_CYCLING_SPEED_AND_CADENCE                       0x1816     /**< Cycling Speed and Cadence service UUID. 骑行速度和踏频UUID*/
#define BLE_UUID_LOCATION_AND_NAVIGATION_SERVICE                 0x1819     /**< Location and Navigation service UUID. 位置和导航服务UUID*/
#define BLE_UUID_DEVICE_INFORMATION_SERVICE                      0x180A     /**< Device Information service UUID. 设备信息服务UUID*/
#define BLE_UUID_GLUCOSE_SERVICE                                 0x1808     /**< Glucose service UUID. 血糖服务UUID*/
#define BLE_UUID_HEALTH_THERMOMETER_SERVICE                      0x1809     /**< Health Thermometer service UUID. 体温计UUID*/
#define BLE_UUID_HEART_RATE_SERVICE                              0x180D     /**< Heart Rate service UUID. 心率服务UUID*/
#define BLE_UUID_HUMAN_INTERFACE_DEVICE_SERVICE                  0x1812     /**< Human Interface Device service UUID. 人机接口设备UUID*/
#define BLE_UUID_IMMEDIATE_ALERT_SERVICE                         0x1802     /**< Immediate Alert service UUID. 即时警报服务UUID*/
#define BLE_UUID_LINK_LOSS_SERVICE                               0x1803     /**< Link Loss service UUID. 连接失败服务UUID*/
#define BLE_UUID_NEXT_DST_CHANGE_SERVICE                         0x1807     /**< Next Dst Change service UUID. 下一个Dst 更改服务UUID*/
#define BLE_UUID_PHONE_ALERT_STATUS_SERVICE                      0x180E     /**< Phone Alert Status service UUID. 电话警报状态服务UUID*/
#define BLE_UUID_REFERENCE_TIME_UPDATE_SERVICE                   0x1806     /**< Reference Time Update service UUID. 参考时间更新服务UUID*/
#define BLE_UUID_RUNNING_SPEED_AND_CADENCE                       0x1814     /**< Running Speed and Cadence service UUID. 跑步速度和节奏服务UUID*/
#define BLE_UUID_SCAN_PARAMETERS_SERVICE                         0x1813     /**< Scan Parameters service UUID. 扫描参数服务UUID*/
#define BLE_UUID_TX_POWER_SERVICE                                0x1804     /**< TX Power service UUID. 发射功率服务UUID*/
#define BLE_UUID_IPSP_SERVICE                                    0x1820     /**< Internet Protocol Support service UUID. 互联网协议支持服务UUID*/
/** @} */

/** @defgroup UUID_CHARACTERISTICS Characteristic UUID definitions UUID特征值定义
 * @{ */
#define BLE_UUID_BATTERY_LEVEL_STATE_CHAR                        0x2A1B     /**< Battery Level State characteristic UUID. 电池等级状态特征UUID*/
#define BLE_UUID_BATTERY_POWER_STATE_CHAR                        0x2A1A     /**< Battery Power State characteristic UUID. 电源状态特征UUID*/
#define BLE_UUID_REMOVABLE_CHAR                                  0x2A3A     /**< Removable characteristic UUID. 可移动特征UUID */
#define BLE_UUID_SERVICE_REQUIRED_CHAR                           0x2A3B     /**< Service Required characteristic UUID. 服务所需特征UUID*/
#define BLE_UUID_ALERT_CATEGORY_ID_CHAR                          0x2A43     /**< Alert Category Id characteristic UUID. 警告类ID特征UUID*/
#define BLE_UUID_ALERT_CATEGORY_ID_BIT_MASK_CHAR                 0x2A42     /**< Alert Category Id Bit Mask characteristic UUID. 警告类ID位屏蔽特征UUID*/
#define BLE_UUID_ALERT_LEVEL_CHAR                                0x2A06     /**< Alert Level characteristic UUID. 警戒级别特征UUID*/
#define BLE_UUID_ALERT_NOTIFICATION_CONTROL_POINT_CHAR           0x2A44     /**< Alert Notification Control Point characteristic UUID. 警报通知控制点特征UUID*/
#define BLE_UUID_ALERT_STATUS_CHAR                               0x2A3F     /**< Alert Status characteristic UUID. 警戒状态特征UUID*/
#define BLE_UUID_BATTERY_LEVEL_CHAR                              0x2A19     /**< Battery Level characteristic UUID. 电池等级特征UUID*/
#define BLE_UUID_BLOOD_PRESSURE_FEATURE_CHAR                     0x2A49     /**< Blood Pressure Feature characteristic UUID. 血压特性特征UUID*/
#define BLE_UUID_BLOOD_PRESSURE_MEASUREMENT_CHAR                 0x2A35     /**< Blood Pressure Measurement characteristic UUID. 血压测量特征UUID*/
#define BLE_UUID_BODY_SENSOR_LOCATION_CHAR                       0x2A38     /**< Body Sensor Location characteristic UUID. 体表传感器，特征UUID*/
#define BLE_UUID_BOOT_KEYBOARD_INPUT_REPORT_CHAR                 0x2A22     /**< Boot Keyboard Input Report characteristic UUID. 键盘输入报告特征*/
#define BLE_UUID_BOOT_KEYBOARD_OUTPUT_REPORT_CHAR                0x2A32     /**< Boot Keyboard Output Report characteristic UUID. 键盘输出报告特征*/
#define BLE_UUID_BOOT_MOUSE_INPUT_REPORT_CHAR                    0x2A33     /**< Boot Mouse Input Report characteristic UUID.鼠标输入报告特征*/
#define BLE_UUID_CURRENT_TIME_CHAR                               0x2A2B     /**< Current Time characteristic UUID. 鼠标输出报告特征*/
#define BLE_UUID_DATE_TIME_CHAR                                  0x2A08     /**< Date Time characteristic UUID. 日期时间特征UUID*/
#define BLE_UUID_DAY_DATE_TIME_CHAR                              0x2A0A     /**< Day Date Time characteristic UUID. 日期特征UUID*/
#define BLE_UUID_DAY_OF_WEEK_CHAR                                0x2A09     /**< Day Of Week characteristic UUID. 星期特征UUID*/
#define BLE_UUID_DST_OFFSET_CHAR                                 0x2A0D     /**< Dst Offset characteristic UUID. 夏令时补偿特征UUID*/
#define BLE_UUID_EXACT_TIME_256_CHAR                             0x2A0C     /**< Exact Time 256 characteristic UUID. 准确时间 256 特征UUID*/
#define BLE_UUID_FIRMWARE_REVISION_STRING_CHAR                   0x2A26     /**< Firmware Revision String characteristic UUID. 固件版本字符串特征UUID*/
#define BLE_UUID_GLUCOSE_FEATURE_CHAR                            0x2A51     /**< Glucose Feature characteristic UUID. 血糖功能特征UUID*/
#define BLE_UUID_GLUCOSE_MEASUREMENT_CHAR                        0x2A18     /**< Glucose Measurement characteristic UUID. 血糖测量特征UUID*/
#define BLE_UUID_GLUCOSE_MEASUREMENT_CONTEXT_CHAR                0x2A34     /**< Glucose Measurement Context characteristic UUID. 血糖测量环境特征UUID*/
#define BLE_UUID_HARDWARE_REVISION_STRING_CHAR                   0x2A27     /**< Hardware Revision String characteristic UUID. 硬件修订字符串特征UUID*/
#define BLE_UUID_HEART_RATE_CONTROL_POINT_CHAR                   0x2A39     /**< Heart Rate Control Point characteristic UUID. 心率测量点特征UUID*/
#define BLE_UUID_HEART_RATE_MEASUREMENT_CHAR                     0x2A37     /**< Heart Rate Measurement characteristic UUID. 心率测量特性UUID*/
#define BLE_UUID_HID_CONTROL_POINT_CHAR                          0x2A4C     /**< Hid Control Point characteristic UUID. 隐藏控制特征UUID*/
#define BLE_UUID_HID_INFORMATION_CHAR                            0x2A4A     /**< Hid Information characteristic UUID. 隐藏信息特征UUID*/
#define BLE_UUID_IEEE_REGULATORY_CERTIFICATION_DATA_LIST_CHAR    0x2A2A     /**< IEEE Regulatory Certification Data List characteristic UUID. IEEE管理认证数据列表特征UUID*/
#define BLE_UUID_INTERMEDIATE_CUFF_PRESSURE_CHAR                 0x2A36     /**< Intermediate Cuff Pressure characteristic UUID. 中心气压特征UUID*/
#define BLE_UUID_INTERMEDIATE_TEMPERATURE_CHAR                   0x2A1E     /**< Intermediate Temperature characteristic UUID. 中心气温特征UUID*/
#define BLE_UUID_LOCAL_TIME_INFORMATION_CHAR                     0x2A0F     /**< Local Time Information characteristic UUID. 本地时间信息特征UUID*/
#define BLE_UUID_MANUFACTURER_NAME_STRING_CHAR                   0x2A29     /**< Manufacturer Name String characteristic UUID. 制造商名称字符串特征UUID*/
#define BLE_UUID_MEASUREMENT_INTERVAL_CHAR                       0x2A21     /**< Measurement Interval characteristic UUID. 测量间隔特征UUID*/
#define BLE_UUID_MODEL_NUMBER_STRING_CHAR                        0x2A24     /**< Model Number String characteristic UUID. 设备型号特征UUID*/
#define BLE_UUID_UNREAD_ALERT_CHAR                               0x2A45     /**< Unread Alert characteristic UUID. 未读警报特征UUID*/
#define BLE_UUID_NEW_ALERT_CHAR                                  0x2A46     /**< New Alert characteristic UUID. 新警报特征UUID*/
#define BLE_UUID_PNP_ID_CHAR                                     0x2A50     /**< PNP Id characteristic UUID. PNP ID 特征UUID*/
#define BLE_UUID_PROTOCOL_MODE_CHAR                              0x2A4E     /**< Protocol Mode characteristic UUID. 协议模式特征UUID*/
#define BLE_UUID_RECORD_ACCESS_CONTROL_POINT_CHAR                0x2A52     /**< Record Access Control Point characteristic UUID. 记录方向控制点特征UUID*/
#define BLE_UUID_REFERENCE_TIME_INFORMATION_CHAR                 0x2A14     /**< Reference Time Information characteristic UUID. 参考时间信息特征UUID*/
#define BLE_UUID_REPORT_CHAR                                     0x2A4D     /**< Report characteristic UUID. 报告特性UUID*/
#define BLE_UUID_REPORT_MAP_CHAR                                 0x2A4B     /**< Report Map characteristic UUID. 报告地图特征UUID*/
#define BLE_UUID_RINGER_CONTROL_POINT_CHAR                       0x2A40     /**< Ringer Control Point characteristic UUID. 铃声控制点特征UUID*/
#define BLE_UUID_RINGER_SETTING_CHAR                             0x2A41     /**< Ringer Setting characteristic UUID. 铃声设置特征UUID*/
#define BLE_UUID_SCAN_INTERVAL_WINDOW_CHAR                       0x2A4F     /**< Scan Interval Window characteristic UUID. 扫描间隔特征UUID*/
#define BLE_UUID_SCAN_REFRESH_CHAR                               0x2A31     /**< Scan Refresh characteristic UUID. 扫描刷新特征UUID*/
#define BLE_UUID_SERIAL_NUMBER_STRING_CHAR                       0x2A25     /**< Serial Number String characteristic UUID. 序列号字符串特征UUID*/
#define BLE_UUID_SOFTWARE_REVISION_STRING_CHAR                   0x2A28     /**< Software Revision String characteristic UUID. 软件修改字符串特性UUID*/
#define BLE_UUID_SUPPORTED_NEW_ALERT_CATEGORY_CHAR               0x2A47     /**< Supported New Alert Category characteristic UUID. 支持新的警报类别特征UUID*/
#define BLE_UUID_SUPPORTED_UNREAD_ALERT_CATEGORY_CHAR            0x2A48     /**< Supported Unread Alert Category characteristic UUID. 支持未读警报类别特征UUID*/
#define BLE_UUID_SYSTEM_ID_CHAR                                  0x2A23     /**< System Id characteristic UUID. 系统标识特征UUID*/
#define BLE_UUID_TEMPERATURE_MEASUREMENT_CHAR                    0x2A1C     /**< Temperature Measurement characteristic UUID. 温度测量特征UUID*/
#define BLE_UUID_TEMPERATURE_TYPE_CHAR                           0x2A1D     /**< Temperature Type characteristic UUID. 温度类型UUID特征*/
#define BLE_UUID_TIME_ACCURACY_CHAR                              0x2A12     /**< Time Accuracy characteristic UUID. 时间精度特征UUID*/
#define BLE_UUID_TIME_SOURCE_CHAR                                0x2A13     /**< Time Source characteristic UUID. 时间原特征UUID*/
#define BLE_UUID_TIME_UPDATE_CONTROL_POINT_CHAR                  0x2A16     /**< Time Update Control Point characteristic UUID. 时间更新控制点特征UUID*/
#define BLE_UUID_TIME_UPDATE_STATE_CHAR                          0x2A17     /**< Time Update State characteristic UUID. 时间更新状态特征UUID*/
#define BLE_UUID_TIME_WITH_DST_CHAR                              0x2A11     /**< Time With Dst characteristic UUID. 带夏令时的时间特征UUID*/
#define BLE_UUID_TIME_ZONE_CHAR                                  0x2A0E     /**< Time Zone characteristic UUID. 时区特征UUID*/
#define BLE_UUID_TX_POWER_LEVEL_CHAR                             0x2A07     /**< TX Power Level characteristic UUID. TX功率等级特性UUID*/
#define BLE_UUID_CSC_FEATURE_CHAR                                0x2A5C     /**< Cycling Speed and Cadence Feature characteristic UUID. 骑行速度和踏频特征UUID*/
#define BLE_UUID_CSC_MEASUREMENT_CHAR                            0x2A5B     /**< Cycling Speed and Cadence Measurement characteristic UUID. 骑行速度和踏频测量UUID*/
#define BLE_UUID_RSC_FEATURE_CHAR                                0x2A54     /**< Running Speed and Cadence Feature characteristic UUID. 跑步速度和节奏特征UUID*/
#define BLE_UUID_SC_CTRLPT_CHAR                                  0x2A55     /**< Speed and Cadence Control Point UUID. 速度和节奏控制点UUID*/
#define BLE_UUID_RSC_MEASUREMENT_CHAR                            0x2A53     /**< Running Speed and Cadence Measurement characteristic UUID. 跑步速度和节奏测量特征UUID*/
#define BLE_UUID_SENSOR_LOCATION_CHAR                            0x2A5D     /**< Sensor Location characteristic UUID. 传感器位置特征UUID*/
#define BLE_UUID_EXTERNAL_REPORT_REF_DESCR                       0x2907     /**< External Report Reference descriptor UUID. 外部报告参考描述UUID*/
#define BLE_UUID_REPORT_REF_DESCR                                0x2908     /**< Report Reference descriptor UUID. 外部操控描述UUID*/
#define BLE_UUID_LN_FEATURE_CHAR                                 0x2A6A     /**< Location Navigation Service, Feature characteristic UUID. 位置导航服务，特征UUID*/
#define BLE_UUID_LN_POSITION_QUALITY_CHAR                        0x2A69     /**< Location Navigation Service, Position quality UUID. 位置当行服务，位置质量UUID*/
#define BLE_UUID_LN_LOCATION_AND_SPEED_CHAR                      0x2A67     /**< Location Navigation Service, Location and Speed characteristic UUID. 位置导航服务，位置和速度特性UUID*/
#define BLE_UUID_LN_NAVIGATION_CHAR                              0x2A68     /**< Location Navigation Service, Navigation characteristic UUID. 定位导航服务，导航特性UUID*/
#define BLE_UUID_LN_CONTROL_POINT_CHAR                           0x2A6B     /**< Location Navigation Service, Control point characteristic UUID. 位置导航服务，控制点特征UUID*/
/** @} */

/** @defgroup ALERT_LEVEL_VALUES Definitions for the Alert Level characteristic values //警报级别特征值的定义
 * @{ */
#define BLE_CHAR_ALERT_LEVEL_NO_ALERT                            0x00       /**< No Alert. 无警报*/
#define BLE_CHAR_ALERT_LEVEL_MILD_ALERT                          0x01       /**< Mild Alert. 轻度警报*/
#define BLE_CHAR_ALERT_LEVEL_HIGH_ALERT                          0x02       /**< High Alert. 高度警报*/
/** @} */

#define BLE_SRV_ENCODED_REPORT_REF_LEN                           2          /**< The length of an encoded Report Reference Descriptor. //编码报告引用名长度*/
#define BLE_CCCD_VALUE_LEN                                       2          /**< The length of a CCCD value. //CCCD值长度*/

/**@brief Type definition for error handler function that will be called in case of an error in //类型定义错误处理函数，在出错的情况下被称为服务或服务库模块。
 *        a service or a service library module. */
typedef void (*ble_srv_error_handler_t) (uint32_t nrf_error);



/**@brief Value of a Report Reference descriptor.  //报告引用描述符的值
 *
 * @details This is mapping information that maps the parent characteristic to the Report ID(s) and //这将是父特性映射到报表ID(s)的映射信息报告类型(s) 定义在报告映射特性中。
 *          Report Type(s) defined within a Report Map characteristic.
 */
typedef struct
{
    uint8_t report_id;                                  /**< Non-zero value if there is more than one instance of the same Report Type  有多个相同类型报告的实例*/
    uint8_t report_type;                                /**< Type of Report characteristic (see @ref BLE_HIDS_REPORT_TYPE) 报告特征类型(参见 BLE_HID_REPORT_TYPE)*/
} ble_srv_report_ref_t;

/**@brief UTF-8 string data type. // 字符串数据类型
 *
 * @note The type can only hold a pointer to the string data (i.e. not the actual data). //类型只能持有一个指向字符串数据的指针。
 */
typedef struct
{
    uint16_t  length;                                   /**< String length. //字符串长度*/
    uint8_t * p_str;                                    /**< String data. //字符串数据*/
} ble_srv_utf8_str_t;

 
/**@brief Security settings structure. //安全设置的结构。
 * @details This structure contains the security options needed during initialization of the
 *          service. //这个结构包含了在初始化过程中需要的安全选项服务。
 */
typedef struct
{
    ble_gap_conn_sec_mode_t read_perm;                  /**< Read permissions. */
    ble_gap_conn_sec_mode_t write_perm;                 /**< Write permissions. */
} ble_srv_security_mode_t;

/**@brief Security settings structure. //安全设置的结构。
 * @details This structure contains the security options needed during initialization of the
 *          service. It can be used when the characteristics contains a CCCD. //这个结构包含了在初始化过程中需要的安全选项服务。当特征包含CCCD时，可以使用它。
 */
typedef struct
{
    ble_gap_conn_sec_mode_t cccd_write_perm;            /**< Write permissions for Client Characteristic Configuration Descriptor. //为客户端特征配置描述写权限*/
    ble_gap_conn_sec_mode_t read_perm;                  /**< Read permissions. //读权限*/
    ble_gap_conn_sec_mode_t write_perm;                 /**< Write permissions. //写权限*/
} ble_srv_cccd_security_mode_t;

/**@brief Function for decoding a CCCD value, and then testing if notification is
 *        enabled. //解析CCCD值的函数，然后测试是否启用通知。
 *
 * @param[in]   p_encoded_data   Buffer where the encoded CCCD is stored. //存储已编码的CCCD的缓冲区。
 *
 * @retval      TRUE If notification is enabled. //如果通知被启用，则是真。
 * @retval      FALSE Otherwise.        //否则就是错误
 */
static __INLINE bool ble_srv_is_notification_enabled(uint8_t * p_encoded_data)
{
    uint16_t cccd_value = uint16_decode(p_encoded_data);
    return ((cccd_value & BLE_GATT_HVX_NOTIFICATION) != 0);
}
    
/**@brief Function for decoding a CCCD value, and then testing if indication is
 *        enabled. //解码CCCD值的函数，然后测试是否有指示启用。
 *
 * @param[in]   p_encoded_data   Buffer where the encoded CCCD is stored. //存储已编码的CCCD的缓冲区。
 *
 * @retval      TRUE If indication is enabled. ，如果指示被弃用，则是真
 * @retval      FALSE Otherwise. //否则是假。
 */
static __INLINE bool ble_srv_is_indication_enabled(uint8_t * p_encoded_data)
{
    uint16_t cccd_value = uint16_decode(p_encoded_data);
    return ((cccd_value & BLE_GATT_HVX_INDICATION) != 0);
}

/**@brief Function for encoding a Report Reference Descriptor. //用于编码报表引用描述符的函数。
 *
 * @param[in]   p_encoded_buffer  The buffer of the encoded data. //数据编码的的缓冲区。
 * @param[in]   p_report_ref      Report Reference value to be encoded. //报告参考值被编码。
 *
 * @return      Length of the encoded data. //编码数据的长度。
 */
uint8_t ble_srv_report_ref_encode(uint8_t *                    p_encoded_buffer,
                                  const ble_srv_report_ref_t * p_report_ref);

/**@brief Function for making a UTF-8 structure refer to an ASCII string. //用于制作UTF - 8 结构的函数是指ASCII字符串。
 *
 * @param[out]  p_utf8   UTF-8 structure to be set.  //要设置UTF - 8 结构
 * @param[in]   p_ascii  ASCII string to be referred to. // 要引用的ASCII的字符串。
 */
void ble_srv_ascii_to_utf8(ble_srv_utf8_str_t * p_utf8, char * p_ascii);


/**@brief Security Access enumeration. //安全访问枚举
 * @details This enumeration gives the possible requirements for accessing a characteristic value. //这个枚举给出了访问特征值的可能需求。
 */
typedef enum
{
    SEC_NO_ACCESS    = 0,            /**< Not possible to access. //无法访问*/
    SEC_OPEN         = 1,            /**< Access open. //开放访问*/
		SEC_JUST_WORKS   = 2,            /**< Access possible with 'Just Works' security at least. //至少可以使用"只是工作"的安全*/
    SEC_MITM         = 3,            /**< Access possible with 'MITM' security at least.  //至少可以使用"MTM"安全访问*/
    SEC_SIGNED       = 4,            /**< Access possible with 'signed' security at least. //至少可以使用"签名的安全访问"*/
    SEC_SIGNED_MITM  = 5             /**< Access possible with 'signed and MITM' security at least. //至少可以使用"签名和MITM的安全性"*/
}security_req_t;


/**@brief Characteristic User Descriptor parameters. //用户描述符参数特性
 * @details This structure contains the parameters for User Descriptor. //这个结构包含用户描述符的参数
 */
typedef struct
{
    uint16_t               max_size;                      /**< Maximum size of the user descriptor //用户描述符的最大大小 */
    uint16_t               size;                          /**< Size of the user descriptor //用户描述符的大小 */
    uint8_t                *p_char_user_desc;             /**< User descriptor content, pointer to a UTF-8 encoded string (non-NULL terminated) //用户描述符的内容，指向UTF - 8 编码字符串的指针(非空终止)*/
    bool                   is_var_len;                    /**< Indicates if the user descriptor has variable length.//表示用户描述符是否具有可变长度*/
    ble_gatt_char_props_t  char_props;                    /**< user descriptor properties.//用户描述符属性*/
    bool                   is_defered_read;               /**< Indicate if deferred read operations are supported.//指示是否支持延迟读操作*/
    bool                   is_defered_write;              /**< Indicate if deferred write operations are supported.//指示是否支持延迟写操作*/
    security_req_t         read_access;                   /**< Security requirement for reading the user descriptor.//读取用户描述符的安全需求*/
    security_req_t         write_access;                  /**< Security requirement for writing the user descriptor.//编写用户描述的安全需求*/
    bool                   is_value_user;                 /**< Indicate if the content of the characteristic is to be stored in the application (user) or in the stack.//指示该特性的内容是否存储在应用程序(用户)或堆栈中。 */
}ble_add_char_user_desc_t;


/**@brief Add characteristic parameters structure.//添加特征参数结构
 * @details This structure contains the parameters needed to use the @ref characteristic_add function. //这个结构包含了使用 特征添加函数所需的参数。
 */
typedef struct
{
    uint16_t                    uuid;                     /**< Characteristic UUID (16 bits UUIDs).//特征UUID(16位UUID)*/
    uint8_t                     uuid_type;                /**< Base UUID. If 0, the Bluetooth SIG UUID will be used. Otherwise, this should be a value returned by @ref sd_ble_uuid_vs_add when adding the base UUID.*/
																														//基础UUID。为0时，将使用蓝牙团体UUID。否则，这应该是sd_ble_uuid_vs_add 在添加基础UUID时的返回的值，
    uint16_t                    max_len;                  /**< Maximum length of the characteristic value.//特征值的最大长度*/
    uint16_t                    init_len;                 /**< Initial length of the characteristic value.//特征值的初始长度*/
    uint8_t *                   p_init_value;             /**< Initial encoded value of the characteristic.//该特性的初始编码值*/
    bool                        is_var_len;               /**< Indicates if the characteristic value has variable length.//表示特征值是否具有可变长度。*/
    ble_gatt_char_props_t       char_props;               /**< Characteristic properties.//特征属性*/
    bool                        is_defered_read;          /**< Indicate if deferred read operations are supported.//指示是否支持延迟读操作*/
    bool                        is_defered_write;         /**< Indicate if deferred write operations are supported.//指示是否支持延迟写操作*/
    security_req_t              read_access;              /**< Security requirement for reading the characteristic value.//读取特征值的安全性要求。*/
    security_req_t              write_access;             /**< Security requirement for writing the characteristic value.//编写特性值的安全性要求*/
    security_req_t              cccd_write_access;        /**< Security requirement for writing the characteristic's CCCD.//编写特性的CCCD的安全性要求。*/
    bool                        is_value_user;            /**< Indicate if the content of the characteristic is to be stored in the application (user) or in the stack.//指示该特性的内容是否存储在应用程序(用户)或堆栈中。*/
    ble_add_char_user_desc_t    *p_user_descr;            /**< Pointer to user descriptor if needed //如果需要，指针指向用户描述符*/
    ble_gatts_char_pf_t         *p_presentation_format;   /**< Pointer to characteristic format if needed //如果需要，指针指向特征格式 */
} ble_add_char_params_t;


/**@brief Add descriptor parameters structure. //添加描述符参数结构
 * @details This structure contains the parameters needed to use the @ref descriptor_add function. //这个结构包含使用 descriptor_add 函数所需的参数。
 */
typedef struct
{
    uint16_t       uuid;                     /**< descriptor UUID (16 bits UUIDs).//描述符UUID(16位UUID)*/
    uint8_t        uuid_type;                /**< Base UUID. If 0, the Bluetooth SIG UUID will be used. Otherwise, this should be a value returned by @ref sd_ble_uuid_vs_add when adding the base UUID.*/
																							//基础UUID，为0时，将使用蓝牙SIGUUID，否则，这应该是 sd_ble_uuid_vs_add 在添加基础UUID时返回的值。
		bool           is_defered_read;          /**< Indicate if deferred read operations are supported.//指示是否支持延迟读操作*/
    bool           is_defered_write;         /**< Indicate if deferred write operations are supported.//指示是否支持延迟写操作*/
    bool           is_var_len;               /**< Indicates if the descriptor value has variable length.//表示描述符值是否具有可变长度*/
    security_req_t read_access;              /**< Security requirement for reading the descriptor value.//读取描述符值的安全性要求*/
    security_req_t write_access;             /**< Security requirement for writing the descriptor value.//编写描述符值的安全性要求*/
    bool           is_value_user;            /**< Indicate if the content of the characteristic is to be stored in the application (user) or in the stack.//指示该特性的内容是否存储在应用程序(用户)或堆栈中*/
    uint16_t       init_len;                 /**< Initial descriptor value length in bytes. //初始描述符值长度以字节为单位*/
    uint16_t       init_offs;                /**< Initial descriptor value offset in bytes. If different from zero, the first init_offs bytes of the attribute value will be left uninitialized. */
																							//初始描述值以字节数偏移。如果不同于零，那么属性值的第一个init_offs 字节将不会被初始化。
    uint16_t       max_len;                  /**< Maximum descriptor value length in bytes, see @ref BLE_GATTS_ATTR_LENS_MAX for maximum values. */
																						//最大的描述符值长度，请参阅 BLE_GATTS_ATTR_LENS_MAX 以获得最大的值。
    uint8_t*       p_value;                  /**< Pointer to the value of the descriptor*/
																						//指针指向描述符的值
} ble_add_descr_params_t;


/**@brief Function for adding a characteristic to a given service.  //为给定服务添加特征的函数
 *
 * If no pointer is given for the initial value, //如果没有给出初始值的指针
 * the initial length parameter will be ignored and the initial length will be 0. 
 //初始值长度参数将被忽略，初始长度将为0.


 *
 * @param[in]  service_handle Handle of the service to which the characteristic is to be added. //要添加特性服务的句柄

 * @param[in]  p_char_props   Information needed to add the characteristic. //添加特征所需的信息
 * @param[out] p_char_handle  Handle of the added characteristic. //附加特性的处理。
 *
 * @retval      NRF_SUCCESS If the characteristic was added successfully. Otherwise, an error code is returned. //该特性被成功地添加了，返回此值，否则会返回一个错误码。
 */
uint32_t characteristic_add(uint16_t                   service_handle,
                            ble_add_char_params_t *    p_char_props,
                            ble_gatts_char_handles_t * p_char_handle);


/**@brief Function for adding a characteristic's descriptor to a given characteristic. //将特征描述符添加到给定特征的函数。
 *
 * @param[in]  char_handle    Handle of the characteristic to which the descriptor is to be added, if @ref BLE_GATT_HANDLE_INVALID is used, it will be placed sequentially.
 //要添加描述符特征的句柄，如果调用 BLE_GATT_HANDLE_INVALID 无效，它将按顺序放置。
 * @param[in]  p_descr_props  Information needed to add the descriptor.
 //添加描述符所需的信息。
 * @param[out] p_descr_handle Handle of the added descriptor.
 //添加描述符的句柄。
 *
 * @retval      NRF_SUCCESS If the characteristic was added successfully. Otherwise, an error code is returned.
 //如果该特性被成功地添加了，返回这个，否则会返回一个错误码。
 */
uint32_t descriptor_add(uint16_t                   char_handle,
                        ble_add_descr_params_t *   p_descr_props,
                        uint16_t *                 p_descr_handle);


#endif // BLE_SRV_COMMON_H__

/** @} */
